

class SimpleChatbot:
    def __init__(self):
        self.basic_responses = {
            "hi": "Hello!",
            "hello": "Hi there!",
            "how are you": "I'm just a program, so I'm always good!",
            "bye": "Goodbye! Have a nice day!",
            "thanks": "You're welcome!"
        }
        
        self.fallback_responses = [
            "Sorry, I didn't understand that.",
            "Can you please rephrase?",
            "I'm not sure what you mean."
        ]

    def tokenize_and_tag(self, user_input):
        tokens = nltk.word_tokenize(user_input)
        tagged_tokens = nltk.pos_tag(tokens)
        return tagged_tokens

    def generate_response(self, user_input):
        user_input = user_input.lower()
        
        # Check for basic responses
        if user_input in self.basic_responses:
            return self.basic_responses[user_input]

        # Perform some basic NLP processing with spaCy
        doc = nlp(user_input)
        if any(ent.label_ == "GPE" for ent in doc.ents):
            return "It sounds like you're talking about a place."

        # Part of speech tagging and simple pattern matching
        tagged_tokens = self.tokenize_and_tag(user_input)
        for word, tag in tagged_tokens:
            if tag == "NN":
                return f"Tell me more about {word}."

        # If no pattern matches, return a fallback response
        return random.choice(self.fallback_responses)

    def start_chat(self):
        print("Hello! I am a simple chatbot. Type 'bye' to exit.")
        while True:
            user_input = input("You: ")
            if user_input.lower() == "bye":
                print("Chatbot: Goodbye! Have a great day!")
                break
            response = self.generate_response(user_input)
            print(f"Chatbot: {response}")

if __name__ == "__main__":
    chatbot = SimpleChatbot()
    chatbot.start_chat()
